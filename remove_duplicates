#!/usr/bin/env python3
import sys

# Variables
discriminate_chr = True # Si el programa discrimina entre chr distintos o no
overlap_thr = 0.5       # Cual es la proporción de superposición mínimo (del mayor) entre dos segmentos para considerarlos duplicados
max_distance = 164      # Cual es la distancia máxima a considerar si es que overlap_thr = 0

debugging = False

source_arr = []
output_arr = []

dups = []

c = 0

# Funciones
# Comparación de segmentos
def eq_segments(seg1, seg2):
    # Checar si chr coincide
    if discriminate_chr and seg1[0] != seg2[0]:
        return False

    # Checar si la distancia es menor a max_distance
    if overlap_thr == 0:
        # Primer caso, seg1 está antes
        if seg2[1] - seg1[2] <= max_distance:
            return True
        # Segundo caso, seg2 está antes
        elif seg1[1] - seg2[2] <= max_distance:
            return True
        

    # Checar si intersectan
    if seg1[2] < seg2[1] or seg2[2] < seg1[1]:
        return False

    # De aquí en adelante podemos asumir que estos dos segmentos intersectan
    # 1er caso, seg2 está contenido en seg1
    elif seg1[1] <= seg2[1] and seg1[2] >= seg2[2]:
        # Seg 1, el segmento mayor, se mantiene igual, se unen los id
        debug("seg2 in seg1")
        seg1[6] = seg1[6] + "-" + seg2[6]
        return True
    # 2do caso, seg1 está contenido en seg2
    elif seg1[1] >= seg2[1] and seg1[2] <= seg2[2]:
        # Seg 1, el segmento menor, es reemplazado por seg2, se unen los id
        debug("seg1 in seg2")
        seg1[1] = seg2[1]; seg1[2] = seg2[2]
        seg1[6] = seg1[6] + "-" + seg2[6]
        return True
    # 3er caso, la longitud de intersección es más del overlap_thr% de la longitud del segmento más largo
    elif overlap_prop(seg1, seg2) >= overlap_thr:
        debug("overlap")
        seg1[1] = min(seg1[1], seg2[1]); seg1[2] = max(seg1[2], seg2[2])
        seg1[6] = seg1[6] + "-" + seg2[6]
        return True
    
    # Se asume que no son el mismo segmento
    return False

# Calcula superposición entre dos segmentos
def overlap_prop(seg1, seg2):
    # Inicialización de variables
    l1 = int(seg1[2]) - int(seg1[1])
    l2 = int(seg2[2]) - int(seg2[1])
    lmax = 0
    overlap = 0
    
    lmax = max(l1, l2)

    # Largo intersección: min(max(s1), max(s2)) - max(min(s1), min(s2))
    tmin = int(min(max(seg1[1], seg1[2]), max(seg2[1], seg2[2])))
    tmax = int(max(min(seg1[1], seg1[2]), min(seg2[1], seg2[2])))

    overlap = (tmin - tmax) / lmax

    return overlap

# Comparación de índices
def dup_compare(index, dup_list):
    for d in dup_list:
        if d == index:
            return True
    # Se asume que no son iguales
    return False

# Utilities
def calc_progress(count, total):
    perc = round(100*count/total, 2)
    print(str(perc) + "%")

def debug(text):
    if debugging:
        print("DEBUG: " + text)

# Chequear número de argumenos
if len(sys.argv) == 1:
    print("Se requiere al menos un archivo como parámetro!")
    print("$ ./remove_duplicates file1.bed file2.bed ... fileN.bed")
    exit()

# Abrir archivos de lectura
for i in range(1, len(sys.argv)):
    source = open(sys.argv[i], "r")

    # Traspasar a arreglo
    for line in source:
        source_arr.append(line)

    # Cerrar archivo lectura
    source.close()

# Abrir archivo de escritura
output = open("undup_output.bed" , "w")

total_len = len(source_arr)

# Recorrer arreglo al revés, marcar duplicados
for i in range(total_len, 0, -1):
    # Índice efectivo para comparación
    cix = i - 1
    for j in range(cix):
        # Si es verdadero, son iguales
        s1 = source_arr[cix].split('\t')
        s2 = source_arr[j].split('\t')
        if eq_segments(s1, s2):            
            # Se agrega a lista de duplicados
            dups.append(j)
            # Se actualiza el primer segmento, el que se conserva
            source_arr[cix] = "\t".join(s1)
            #break
    if c % 10 == 0:
        calc_progress(c, total_len)
    c += 1

# Remover duplicados, desde el último al primero
for i in range(len(source_arr)):
    # Si son iguales, no pasa nada
    if dup_compare(i, dups):
        continue
    # Sino, escribimos
    else:
        output_arr.append(source_arr[i])

# Escribir y cerrar archivo de escritura
for seg in output_arr:
    output.write(str(seg).replace("\n", "") + "\n")

output.close()